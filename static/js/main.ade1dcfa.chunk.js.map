{"version":3,"sources":["components/AppDetail.js","components/CardComponent.js","components/SearchComponent.js","components/RepoList.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["AppDetail","useStyles","makeStyles","theme","root","maxWidth","maxHeight","media","height","paddingTop","AppReviewCard","props","classes","Card","className","CardHeader","action","IconButton","aria-label","title","CardMedia","image","process","CardContent","Typography","variant","color","component","desc","marginLeft","marginTop","SearchBarComponent","useState","count","setCount","value","onChange","newValue","onRequestSearch","this","state","doSomethingWith","paddingLeft","marginBottom","RepoList","repos","setData","useEffect","fetchData","a","axios","get","res","data","Grid","container","spacing","map","repo","item","xs","sm","md","name","description","flexGrow","MyAppBar","AppBar","position","Toolbar","App","basename","path","exact","Home","Component","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ade1dcfa.chunk.js","sourcesContent":["import React ,  { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction AppDetail({match}){\r\n\t\r\n\t\r\n\treturn (\r\n\t\r\n\t<div>\r\n\t\r\n\t</div>\r\n\t\r\n\t);\r\n\r\n}\r\n\r\nexport default AppDetail;","import React ,  { useState, useEffect } from 'react';\r\n\r\n\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\n\r\n\r\nimport AppDetail from './AppDetail.js'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 250,\r\n    maxHeight: 300,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction AppReviewCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\t\t<Card className={classes.root}>\r\n\t\t  <CardHeader\r\n\t\t\taction={\r\n\t\t\t  <IconButton aria-label=\"settings\">\r\n\t\t\t\t<MoreVertIcon />\r\n\t\t\t  </IconButton>\r\n\t\t\t}\r\n\t\t\ttitle={props.title}\r\n\t\t  />\r\n\t\t  <CardMedia\r\n\t\t\tclassName={classes.media}\r\n\t\t\timage= {process.env.PUBLIC_URL + '/images/' + props.title + \".png\"}\t\t\t\r\n\t\t\ttitle= {props.title}\r\n\t\t  />\r\n\t\t  <CardContent>\r\n\t\t\t<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n\t\t\t{props.desc}\r\n\t\t\t</Typography>\r\n\t\t  </CardContent>\r\n\t\t</Card>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default AppReviewCard\r\n\r\n\r\n\r\n","import React ,  { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport { CenterFocusStrong } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 500,\r\n    marginLeft: 500,\r\n    marginTop:50,\r\n  },\r\n\r\n}));\r\n\r\n\r\nfunction doSomethingWith (){\r\n  this.state = \"\"\r\n}\r\n\r\n\r\n\r\nfunction SearchBarComponent (){\r\n  const classes = useStyles();\r\n  const [count, setCount] = useState();\r\n\r\n      return (\r\n         <SearchBar\r\n          className={classes.root}\r\n          value={count}\r\n          onChange={(newValue) => setCount({ value: newValue })}\r\n          onRequestSearch={() => doSomethingWith(this.state.value)}\r\n        />\r\n    );\r\n}\r\n  \r\nexport default SearchBarComponent","import React ,  { useState, useEffect } from 'react';\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nimport AppReviewCard from './CardComponent.js'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\n\r\nconst ORG_QUERY = \"https://api.github.com/orgs/Block-exchange/repos?per_page=200\" \r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: '80px',\r\n    marginTop:50,\r\n    marginBottom:50,\r\n  },\r\n\r\n}));\r\n\r\n\r\n\r\nfunction RepoList () {\r\n    const classes = useStyles();\r\n    const [repos, setData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n      }, []);\r\n\r\n    \r\n    const fetchData = async () => {\r\n      const res = await axios.get(\r\n        ORG_QUERY,\r\n      );\r\n      setData(res.data);\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={3} className={classes.root}>\r\n  \r\n          {\r\n           repos.map(\r\n                      repo => <Grid item xs={12} sm={6} md={3}>\r\n                      <AppReviewCard title={repo.name} desc={repo.description}/>\r\n                      </Grid>)\r\n          }\r\n          \r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\nexport default RepoList\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n  \r\n function MyAppBar() {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar variant=\"dense\">\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              Block Exchange\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default MyAppBar","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nimport AppReviewCard from './components/CardComponent.js'\r\nimport SearchBarComponent from './components/SearchComponent.js'\r\nimport RepoList from './components/RepoList.js'\r\nimport MyAppBar from './components/navbar.js'\r\n\r\nimport {\r\n  HashRouter,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n\t    <HashRouter basename='/'>\r\n\t\t<Switch>\r\n\t\t\t<Route path=\"/web\" exact component= {Home} />\r\n\t\t\t<Route path=\"/card\" component= {AppReviewCard} />\r\n\t\t</Switch>\r\n\t\t</HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst Home = () => (\r\n\r\n\t<div className=\"App\">     \r\n\t<MyAppBar/>\r\n\t<div className=\"App-header\">\r\n\t<img src={process.env.PUBLIC_URL + \"/images/1.png\"}/></div>\r\n\t<SearchBarComponent/>\r\n\t<RepoList/>\r\n\t<div className=\"App-header\"/>\r\n    </div>\r\n\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}